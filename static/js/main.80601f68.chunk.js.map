{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","currentImage","handlePrev","props","images","step","frameSize","infinite","setState","currentState","newCurrentImage","length","handleNext","this","itemWidth","animationDuration","className","style","width","map","image","index","transform","transition","src","alt","type","onClick","disabled","React","Component","App","handleChangeStep","event","target","value","handleChangeFrameSize","handleChangeItemWidth","handleChangeAnimation","handleChangeInfinity","htmlFor","id","min","max","onChange","name","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80601f68.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\ntype State = {\n  currentImage: number;\n};\n\nexport class Carousel extends React.Component<Props, State> {\n  state:State = {\n    currentImage: 0,\n  };\n\n  handlePrev = () => {\n    const {\n      images,\n      step,\n      frameSize,\n      infinite,\n    } = this.props;\n\n    this.setState(currentState => {\n      const {\n        currentImage,\n      } = currentState;\n\n      let newCurrentImage = currentImage - step > 0\n        ? currentImage - step\n        : 0;\n\n      if (currentImage === 0 && infinite) {\n        newCurrentImage = images.length - frameSize;\n      }\n\n      return { ...currentState, currentImage: newCurrentImage };\n    });\n  };\n\n  handleNext = () => {\n    const {\n      images,\n      step,\n      frameSize,\n      infinite,\n    } = this.props;\n\n    this.setState(currentState => {\n      const {\n        currentImage,\n      } = currentState;\n      let newCurrentImage = currentImage + step > images.length - frameSize\n        ? images.length - frameSize\n        : currentImage + step;\n\n      if (currentImage === images.length - frameSize && infinite) {\n        newCurrentImage = 0;\n      }\n\n      return { ...currentState, currentImage: newCurrentImage };\n    });\n  };\n\n  render() {\n    const { currentImage } = this.state;\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    return (\n      <div className=\"Carousel\">\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            width: `${frameSize * (itemWidth + 4)}px`,\n          }}\n        >\n\n          {images.map((image, index) => (\n            <li\n              style={{\n                transform: `translateX(-${currentImage * (itemWidth + 4)}px)`,\n                transition: `transform ${animationDuration}ms`,\n              }}\n              key={image}\n            >\n              <img\n                className=\"Carousel__img\"\n                style={{\n                  width: itemWidth,\n                }}\n                src={image}\n                alt={`${index + 1}`}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <div className=\"Carousel__button\">\n          <button\n            type=\"button\"\n            onClick={this.handlePrev}\n            disabled={currentImage === 0 && !infinite}\n          >\n            Prev\n          </button>\n          <button\n            className=\"button\"\n            type=\"button\"\n            data-cy=\"next\"\n            onClick={this.handleNext}\n            disabled={currentImage === images.length - frameSize && !infinite}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n}\nconst images = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nclass App extends React.Component<{}, State> {\n  state = {\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleChangeStep = (event:React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ step: +event.target.value });\n  };\n\n  handleChangeFrameSize = (event:React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ frameSize: +event.target.value });\n  };\n\n  handleChangeItemWidth = (event:React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ itemWidth: +event.target.value });\n  };\n\n  handleChangeAnimation = (event:React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ animationDuration: +event.target.value });\n  };\n\n  handleChangeInfinity = () => {\n    this.setState({ infinite: true });\n  };\n\n  render() {\n    const {\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 data-cy=\"title\">\n          {`Carousel with ${images.length} images`}\n        </h1>\n        <label htmlFor=\"stepId\" className=\"App__input\">\n          Step:\n          <input\n            id=\"stepId\"\n            type=\"number\"\n            value={step}\n            min=\"1\"\n            max=\"10\"\n            step=\"1\"\n            onChange={this.handleChangeStep}\n          />\n        </label>\n        <label htmlFor=\"frameId\" className=\"App__input\">\n          Frame size:\n          <input\n            id=\"frameId\"\n            type=\"number\"\n            value={frameSize}\n            min=\"1\"\n            max=\"10\"\n            step=\"1\"\n            onChange={this.handleChangeFrameSize}\n          />\n        </label>\n        <label htmlFor=\"itemId\" className=\"App__input\">\n          Item width:\n          <input\n            id=\"itemId\"\n            type=\"number\"\n            value={itemWidth}\n            min=\"130\"\n            max=\"2000\"\n            step=\"10\"\n            onChange={this.handleChangeItemWidth}\n          />\n        </label>\n        <label className=\"App__input\">\n          Animation Duration:\n          <input\n            type=\"number\"\n            min=\"1000\"\n            max=\"2000\"\n            step=\"100\"\n            value={animationDuration}\n            onChange={this.handleChangeAnimation}\n          />\n        </label>\n        <label className=\"App__input\">\n          Infinity:\n          <input\n            type=\"checkbox\"\n            name=\"infinite\"\n            checked={infinite}\n            onChange={(event) => {\n              this.setState({\n                infinite: event.target.checked,\n              });\n            }}\n          />\n        </label>\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}